{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ddas0\\\\OneDrive\\\\Desktop\\\\AI Calc\\\\src\\\\components\\\\Calculator.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { Container, Form, Button, Card } from 'react-bootstrap';\nimport * as math from 'mathjs';\nimport { SymbolKeyboard } from './SymbolKeyboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Calculator = () => {\n  _s();\n  const [state, setState] = useState({\n    input: '',\n    result: '',\n    history: []\n  });\n  const inputRef = useRef(null);\n  const handleInputChange = event => {\n    setState(prev => ({\n      ...prev,\n      input: event.target.value\n    }));\n  };\n  const solveDifferentialEquation = equation => {\n    try {\n      // Simple numerical solution using Euler's method\n      const h = 0.1; // step size\n      const steps = 100;\n      const results = [];\n      let x = 0;\n      let y = 1; // initial condition y(0) = 1\n\n      // Convert equation from dy/dx format to a function\n      const equationFunc = (x, y) => {\n        const expr = equation.replace('dy/dx', '').replace('=', '').trim();\n        const result = math.evaluate(expr, {\n          x,\n          y\n        });\n        return typeof result === 'number' ? result : 0;\n      };\n      for (let i = 0; i <= steps; i++) {\n        results.push({\n          x,\n          y\n        });\n        const dy = equationFunc(x, y);\n        y += h * dy;\n        x += h;\n      }\n      setState(prev => ({\n        ...prev,\n        result: JSON.stringify(results, null, 2),\n        history: [...prev.history, `${equation} solved numerically`]\n      }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        result: `Error: ${error instanceof Error ? error.message : 'Invalid equation format'}`\n      }));\n    }\n  };\n  const evaluateExpression = (expr, variables) => {\n    try {\n      return math.evaluate(expr, {\n        ...variables,\n        e: math.e,\n        pi: math.pi\n      });\n    } catch (err) {\n      throw new Error(`Invalid expression: ${expr}`);\n    }\n  };\n  const numericalIntegration = (f, a, b) => {\n    const n = 1000; // number of intervals\n    const h = (b - a) / n;\n    let sum = f(a) + f(b);\n    for (let i = 1; i < n; i++) {\n      const x = a + i * h;\n      sum += 2 * f(x);\n    }\n    for (let i = 1; i < n; i++) {\n      const x = a + (i - 0.5) * h;\n      sum += 4 * f(x);\n    }\n    return h / 6 * sum;\n  };\n  const parseIntegral = equation => {\n    const integralRegex = /∫\\s*([^d]*)\\s*d([a-z])/gi;\n    const matches = Array.from(equation.matchAll(integralRegex));\n    if (matches.length === 0) {\n      throw new Error('No valid integral found');\n    }\n    const expr = matches[0][1].trim();\n    const variable = matches[0][2].toLowerCase();\n    const remainingExpr = equation.replace(matches[0][0], expr);\n    if (matches.length > 1) {\n      const {\n        expr: nestedExpr,\n        vars: nestedVars\n      } = parseIntegral(remainingExpr);\n      return {\n        expr: nestedExpr,\n        vars: [variable, ...nestedVars]\n      };\n    }\n    return {\n      expr,\n      vars: [variable]\n    };\n  };\n  const solveNestedIntegral = (expr, vars, depth = 0) => {\n    if (depth >= vars.length) {\n      return evaluateExpression(expr, {});\n    }\n    const currentVar = vars[depth];\n    const a = 0; // lower bound\n    const b = 1; // upper bound\n\n    const f = x => {\n      const result = solveNestedIntegral(expr, vars, depth + 1);\n      return evaluateExpression(expr, {\n        [currentVar]: x\n      });\n    };\n    return numericalIntegration(f, a, b);\n  };\n  const solveIntegral = equation => {\n    try {\n      // Split multiple integrals if they exist\n      const parts = equation.split('*').map(part => part.trim());\n      const results = parts.map(part => {\n        const {\n          expr,\n          vars\n        } = parseIntegral(part);\n        const result = solveNestedIntegral(expr, vars);\n        return {\n          part,\n          result,\n          order: vars.length\n        };\n      });\n\n      // Multiply results if there are multiple integrals\n      const finalResult = results.reduce((acc, curr) => acc * curr.result, 1);\n      setState(prev => ({\n        ...prev,\n        result: `Result = ${finalResult.toFixed(6)}\\n\\nDetails:\\n${results.map(({\n          part,\n          result,\n          order\n        }) => `${part} (${order}-fold integral) = ${result.toFixed(6)}`).join('\\n')}`,\n        history: [...prev.history, `Solved multiple integrals: ${equation}`]\n      }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        result: `Error: ${error instanceof Error ? error.message : 'Invalid integral format'}`\n      }));\n    }\n  };\n  const handleSolve = () => {\n    if (!state.input.trim()) {\n      setState(prev => ({\n        ...prev,\n        result: 'Error: Please enter an equation'\n      }));\n      return;\n    }\n    try {\n      if (state.input.includes('∫')) {\n        solveIntegral(state.input);\n      } else if (state.input.toLowerCase().includes('dy/dx')) {\n        solveDifferentialEquation(state.input);\n      } else {\n        const result = math.evaluate(state.input);\n        // Handle near-zero values (floating point precision)\n        const formattedResult = Math.abs(result) < 1e-10 ? 0 : result;\n        setState(prev => ({\n          ...prev,\n          result: formattedResult.toString(),\n          history: [...prev.history, `${state.input} = ${formattedResult}`]\n        }));\n      }\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        result: `Error: ${error instanceof Error ? error.message : 'Invalid expression'}`\n      }));\n    }\n  };\n  const handleSymbolClick = symbol => {\n    const input = inputRef.current;\n    if (input) {\n      const start = input.selectionStart || 0;\n      const end = input.selectionEnd || 0;\n      const newValue = state.input.substring(0, start) + symbol + state.input.substring(end);\n      setState(prev => ({\n        ...prev,\n        input: newValue\n      }));\n      // Set cursor position after inserted symbol\n      setTimeout(() => {\n        const newPosition = start + symbol.length;\n        input.setSelectionRange(newPosition, newPosition);\n        input.focus();\n      }, 0);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"py-5\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"shadow-sm\",\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Enter mathematical expression or differential equation\",\n              value: state.input,\n              onChange: handleInputChange,\n              onKeyPress: e => {\n                if (e.key === 'Enter') {\n                  handleSolve();\n                }\n              },\n              ref: inputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: /*#__PURE__*/_jsxDEV(SymbolKeyboard, {\n              onSymbolClick: handleSymbolClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-grid gap-2 mb-3\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              size: \"lg\",\n              onClick: handleSolve,\n              children: \"Solve\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              rows: 4,\n              value: state.result,\n              readOnly: true,\n              className: \"bg-light\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(Calculator, \"R20Vvb3rx4ui6wjqCSnIvn88evA=\");\n_c = Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["React","useState","useRef","Container","Form","Button","Card","math","SymbolKeyboard","jsxDEV","_jsxDEV","Calculator","_s","state","setState","input","result","history","inputRef","handleInputChange","event","prev","target","value","solveDifferentialEquation","equation","h","steps","results","x","y","equationFunc","expr","replace","trim","evaluate","i","push","dy","JSON","stringify","error","Error","message","evaluateExpression","variables","e","pi","err","numericalIntegration","f","a","b","n","sum","parseIntegral","integralRegex","matches","Array","from","matchAll","length","variable","toLowerCase","remainingExpr","nestedExpr","vars","nestedVars","solveNestedIntegral","depth","currentVar","solveIntegral","parts","split","map","part","order","finalResult","reduce","acc","curr","toFixed","join","handleSolve","includes","formattedResult","Math","abs","toString","handleSymbolClick","symbol","current","start","selectionStart","end","selectionEnd","newValue","substring","setTimeout","newPosition","setSelectionRange","focus","className","children","Body","Group","Control","type","placeholder","onChange","onKeyPress","key","ref","fileName","_jsxFileName","lineNumber","columnNumber","onSymbolClick","variant","size","onClick","as","rows","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/ddas0/OneDrive/Desktop/AI Calc/src/components/Calculator.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { Container, Form, Button, Card } from 'react-bootstrap';\r\nimport * as math from 'mathjs';\r\nimport { SymbolKeyboard } from './SymbolKeyboard';\r\n\r\ninterface CalculatorState {\r\n  input: string;\r\n  result: string;\r\n  history: string[];\r\n}\r\n\r\ninterface DifferentialEquationPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport const Calculator: React.FC = () => {\r\n  const [state, setState] = useState<CalculatorState>({\r\n    input: '',\r\n    result: '',\r\n    history: []\r\n  });\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      input: event.target.value\r\n    }));\r\n  };\r\n\r\n  const solveDifferentialEquation = (equation: string) => {\r\n    try {\r\n      // Simple numerical solution using Euler's method\r\n      const h = 0.1; // step size\r\n      const steps = 100;\r\n      const results: DifferentialEquationPoint[] = [];\r\n      let x = 0;\r\n      let y = 1; // initial condition y(0) = 1\r\n\r\n      // Convert equation from dy/dx format to a function\r\n      const equationFunc = (x: number, y: number): number => {\r\n        const expr = equation\r\n          .replace('dy/dx', '')\r\n          .replace('=', '')\r\n          .trim();\r\n        const result = math.evaluate(expr, { x, y });\r\n        return typeof result === 'number' ? result : 0;\r\n      };\r\n\r\n      for (let i = 0; i <= steps; i++) {\r\n        results.push({ x, y });\r\n        const dy = equationFunc(x, y);\r\n        y += h * dy;\r\n        x += h;\r\n      }\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        result: JSON.stringify(results, null, 2),\r\n        history: [...prev.history, `${equation} solved numerically`]\r\n      }));\r\n    } catch (error) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        result: `Error: ${error instanceof Error ? error.message : 'Invalid equation format'}`\r\n      }));\r\n    }\r\n  };\r\n\r\n  const evaluateExpression = (expr: string, variables: Record<string, number>): number => {\r\n    try {\r\n      return math.evaluate(expr, { ...variables, e: math.e, pi: math.pi });\r\n    } catch (err) {\r\n      throw new Error(`Invalid expression: ${expr}`);\r\n    }\r\n  };\r\n\r\n  const numericalIntegration = (f: (x: number) => number, a: number, b: number): number => {\r\n    const n = 1000; // number of intervals\r\n    const h = (b - a) / n;\r\n    \r\n    let sum = f(a) + f(b);\r\n    for (let i = 1; i < n; i++) {\r\n      const x = a + i * h;\r\n      sum += 2 * f(x);\r\n    }\r\n    for (let i = 1; i < n; i++) {\r\n      const x = a + (i - 0.5) * h;\r\n      sum += 4 * f(x);\r\n    }\r\n    return (h / 6) * sum;\r\n  };\r\n\r\n  const parseIntegral = (equation: string): { expr: string, vars: string[] } => {\r\n    const integralRegex = /∫\\s*([^d]*)\\s*d([a-z])/gi;\r\n    const matches = Array.from(equation.matchAll(integralRegex));\r\n    \r\n    if (matches.length === 0) {\r\n      throw new Error('No valid integral found');\r\n    }\r\n\r\n    const expr = matches[0][1].trim();\r\n    const variable = matches[0][2].toLowerCase();\r\n    const remainingExpr = equation.replace(matches[0][0], expr);\r\n\r\n    if (matches.length > 1) {\r\n      const { expr: nestedExpr, vars: nestedVars } = parseIntegral(remainingExpr);\r\n      return {\r\n        expr: nestedExpr,\r\n        vars: [variable, ...nestedVars]\r\n      };\r\n    }\r\n\r\n    return { expr, vars: [variable] };\r\n  };\r\n\r\n  const solveNestedIntegral = (expr: string, vars: string[], depth: number = 0): number => {\r\n    if (depth >= vars.length) {\r\n      return evaluateExpression(expr, {});\r\n    }\r\n\r\n    const currentVar = vars[depth];\r\n    const a = 0; // lower bound\r\n    const b = 1; // upper bound\r\n\r\n    const f = (x: number) => {\r\n      const result = solveNestedIntegral(expr, vars, depth + 1);\r\n      return evaluateExpression(expr, { [currentVar]: x });\r\n    };\r\n\r\n    return numericalIntegration(f, a, b);\r\n  };\r\n\r\n  const solveIntegral = (equation: string) => {\r\n    try {\r\n      // Split multiple integrals if they exist\r\n      const parts = equation.split('*').map(part => part.trim());\r\n      const results = parts.map(part => {\r\n        const { expr, vars } = parseIntegral(part);\r\n        const result = solveNestedIntegral(expr, vars);\r\n        return { part, result, order: vars.length };\r\n      });\r\n\r\n      // Multiply results if there are multiple integrals\r\n      const finalResult = results.reduce((acc, curr) => acc * curr.result, 1);\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        result: `Result = ${finalResult.toFixed(6)}\\n\\nDetails:\\n${results.map(({ part, result, order }) => \r\n          `${part} (${order}-fold integral) = ${result.toFixed(6)}`\r\n        ).join('\\n')}`,\r\n        history: [...prev.history, `Solved multiple integrals: ${equation}`]\r\n      }));\r\n    } catch (error) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        result: `Error: ${error instanceof Error ? error.message : 'Invalid integral format'}`\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSolve = () => {\r\n    if (!state.input.trim()) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        result: 'Error: Please enter an equation'\r\n      }));\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (state.input.includes('∫')) {\r\n        solveIntegral(state.input);\r\n      } else if (state.input.toLowerCase().includes('dy/dx')) {\r\n        solveDifferentialEquation(state.input);\r\n      } else {\r\n        const result = math.evaluate(state.input);\r\n        // Handle near-zero values (floating point precision)\r\n        const formattedResult = Math.abs(result) < 1e-10 ? 0 : result;\r\n        setState(prev => ({\r\n          ...prev,\r\n          result: formattedResult.toString(),\r\n          history: [...prev.history, `${state.input} = ${formattedResult}`]\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        result: `Error: ${error instanceof Error ? error.message : 'Invalid expression'}`\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSymbolClick = (symbol: string) => {\r\n    const input = inputRef.current;\r\n    if (input) {\r\n      const start = input.selectionStart || 0;\r\n      const end = input.selectionEnd || 0;\r\n      const newValue = state.input.substring(0, start) + symbol + state.input.substring(end);\r\n      setState(prev => ({\r\n        ...prev,\r\n        input: newValue\r\n      }));\r\n      // Set cursor position after inserted symbol\r\n      setTimeout(() => {\r\n        const newPosition = start + symbol.length;\r\n        input.setSelectionRange(newPosition, newPosition);\r\n        input.focus();\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className=\"py-5\">\r\n      <Card className=\"shadow-sm\">\r\n        <Card.Body>\r\n          <Form>\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter mathematical expression or differential equation\"\r\n                value={state.input}\r\n                onChange={handleInputChange}\r\n                onKeyPress={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    handleSolve();\r\n                  }\r\n                }}\r\n                ref={inputRef}\r\n              />\r\n            </Form.Group>\r\n\r\n            <div className=\"mb-3\">\r\n              <SymbolKeyboard onSymbolClick={handleSymbolClick} />\r\n            </div>\r\n\r\n            <div className=\"d-grid gap-2 mb-3\">\r\n              <Button\r\n                variant=\"primary\"\r\n                size=\"lg\"\r\n                onClick={handleSolve}\r\n              >\r\n                Solve\r\n              </Button>\r\n            </div>\r\n\r\n            <Form.Group>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows={4}\r\n                value={state.result}\r\n                readOnly\r\n                className=\"bg-light\"\r\n              />\r\n            </Form.Group>\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,SAASC,SAAS,EAAEC,IAAI,EAAEC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;AAC/D,OAAO,KAAKC,IAAI,MAAM,QAAQ;AAC9B,SAASC,cAAc,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAalD,OAAO,MAAMC,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAkB;IAClDc,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVC,OAAO,EAAE;EACX,CAAC,CAAC;EACF,MAAMC,QAAQ,GAAGhB,MAAM,CAAmB,IAAI,CAAC;EAE/C,MAAMiB,iBAAiB,GAAIC,KAA0C,IAAK;IACxEN,QAAQ,CAACO,IAAI,KAAK;MAChB,GAAGA,IAAI;MACPN,KAAK,EAAEK,KAAK,CAACE,MAAM,CAACC;IACtB,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMC,yBAAyB,GAAIC,QAAgB,IAAK;IACtD,IAAI;MACF;MACA,MAAMC,CAAC,GAAG,GAAG,CAAC,CAAC;MACf,MAAMC,KAAK,GAAG,GAAG;MACjB,MAAMC,OAAoC,GAAG,EAAE;MAC/C,IAAIC,CAAC,GAAG,CAAC;MACT,IAAIC,CAAC,GAAG,CAAC,CAAC,CAAC;;MAEX;MACA,MAAMC,YAAY,GAAGA,CAACF,CAAS,EAAEC,CAAS,KAAa;QACrD,MAAME,IAAI,GAAGP,QAAQ,CAClBQ,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CACpBA,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAChBC,IAAI,CAAC,CAAC;QACT,MAAMlB,MAAM,GAAGT,IAAI,CAAC4B,QAAQ,CAACH,IAAI,EAAE;UAAEH,CAAC;UAAEC;QAAE,CAAC,CAAC;QAC5C,OAAO,OAAOd,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAG,CAAC;MAChD,CAAC;MAED,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIT,KAAK,EAAES,CAAC,EAAE,EAAE;QAC/BR,OAAO,CAACS,IAAI,CAAC;UAAER,CAAC;UAAEC;QAAE,CAAC,CAAC;QACtB,MAAMQ,EAAE,GAAGP,YAAY,CAACF,CAAC,EAAEC,CAAC,CAAC;QAC7BA,CAAC,IAAIJ,CAAC,GAAGY,EAAE;QACXT,CAAC,IAAIH,CAAC;MACR;MAEAZ,QAAQ,CAACO,IAAI,KAAK;QAChB,GAAGA,IAAI;QACPL,MAAM,EAAEuB,IAAI,CAACC,SAAS,CAACZ,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QACxCX,OAAO,EAAE,CAAC,GAAGI,IAAI,CAACJ,OAAO,EAAE,GAAGQ,QAAQ,qBAAqB;MAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACd3B,QAAQ,CAACO,IAAI,KAAK;QAChB,GAAGA,IAAI;QACPL,MAAM,EAAE,UAAUyB,KAAK,YAAYC,KAAK,GAAGD,KAAK,CAACE,OAAO,GAAG,yBAAyB;MACtF,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAACZ,IAAY,EAAEa,SAAiC,KAAa;IACtF,IAAI;MACF,OAAOtC,IAAI,CAAC4B,QAAQ,CAACH,IAAI,EAAE;QAAE,GAAGa,SAAS;QAAEC,CAAC,EAAEvC,IAAI,CAACuC,CAAC;QAAEC,EAAE,EAAExC,IAAI,CAACwC;MAAG,CAAC,CAAC;IACtE,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,MAAM,IAAIN,KAAK,CAAC,uBAAuBV,IAAI,EAAE,CAAC;IAChD;EACF,CAAC;EAED,MAAMiB,oBAAoB,GAAGA,CAACC,CAAwB,EAAEC,CAAS,EAAEC,CAAS,KAAa;IACvF,MAAMC,CAAC,GAAG,IAAI,CAAC,CAAC;IAChB,MAAM3B,CAAC,GAAG,CAAC0B,CAAC,GAAGD,CAAC,IAAIE,CAAC;IAErB,IAAIC,GAAG,GAAGJ,CAAC,CAACC,CAAC,CAAC,GAAGD,CAAC,CAACE,CAAC,CAAC;IACrB,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiB,CAAC,EAAEjB,CAAC,EAAE,EAAE;MAC1B,MAAMP,CAAC,GAAGsB,CAAC,GAAGf,CAAC,GAAGV,CAAC;MACnB4B,GAAG,IAAI,CAAC,GAAGJ,CAAC,CAACrB,CAAC,CAAC;IACjB;IACA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiB,CAAC,EAAEjB,CAAC,EAAE,EAAE;MAC1B,MAAMP,CAAC,GAAGsB,CAAC,GAAG,CAACf,CAAC,GAAG,GAAG,IAAIV,CAAC;MAC3B4B,GAAG,IAAI,CAAC,GAAGJ,CAAC,CAACrB,CAAC,CAAC;IACjB;IACA,OAAQH,CAAC,GAAG,CAAC,GAAI4B,GAAG;EACtB,CAAC;EAED,MAAMC,aAAa,GAAI9B,QAAgB,IAAuC;IAC5E,MAAM+B,aAAa,GAAG,0BAA0B;IAChD,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAI,CAAClC,QAAQ,CAACmC,QAAQ,CAACJ,aAAa,CAAC,CAAC;IAE5D,IAAIC,OAAO,CAACI,MAAM,KAAK,CAAC,EAAE;MACxB,MAAM,IAAInB,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IAEA,MAAMV,IAAI,GAAGyB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACvB,IAAI,CAAC,CAAC;IACjC,MAAM4B,QAAQ,GAAGL,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC;IAC5C,MAAMC,aAAa,GAAGvC,QAAQ,CAACQ,OAAO,CAACwB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEzB,IAAI,CAAC;IAE3D,IAAIyB,OAAO,CAACI,MAAM,GAAG,CAAC,EAAE;MACtB,MAAM;QAAE7B,IAAI,EAAEiC,UAAU;QAAEC,IAAI,EAAEC;MAAW,CAAC,GAAGZ,aAAa,CAACS,aAAa,CAAC;MAC3E,OAAO;QACLhC,IAAI,EAAEiC,UAAU;QAChBC,IAAI,EAAE,CAACJ,QAAQ,EAAE,GAAGK,UAAU;MAChC,CAAC;IACH;IAEA,OAAO;MAAEnC,IAAI;MAAEkC,IAAI,EAAE,CAACJ,QAAQ;IAAE,CAAC;EACnC,CAAC;EAED,MAAMM,mBAAmB,GAAGA,CAACpC,IAAY,EAAEkC,IAAc,EAAEG,KAAa,GAAG,CAAC,KAAa;IACvF,IAAIA,KAAK,IAAIH,IAAI,CAACL,MAAM,EAAE;MACxB,OAAOjB,kBAAkB,CAACZ,IAAI,EAAE,CAAC,CAAC,CAAC;IACrC;IAEA,MAAMsC,UAAU,GAAGJ,IAAI,CAACG,KAAK,CAAC;IAC9B,MAAMlB,CAAC,GAAG,CAAC,CAAC,CAAC;IACb,MAAMC,CAAC,GAAG,CAAC,CAAC,CAAC;;IAEb,MAAMF,CAAC,GAAIrB,CAAS,IAAK;MACvB,MAAMb,MAAM,GAAGoD,mBAAmB,CAACpC,IAAI,EAAEkC,IAAI,EAAEG,KAAK,GAAG,CAAC,CAAC;MACzD,OAAOzB,kBAAkB,CAACZ,IAAI,EAAE;QAAE,CAACsC,UAAU,GAAGzC;MAAE,CAAC,CAAC;IACtD,CAAC;IAED,OAAOoB,oBAAoB,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EACtC,CAAC;EAED,MAAMmB,aAAa,GAAI9C,QAAgB,IAAK;IAC1C,IAAI;MACF;MACA,MAAM+C,KAAK,GAAG/C,QAAQ,CAACgD,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACzC,IAAI,CAAC,CAAC,CAAC;MAC1D,MAAMN,OAAO,GAAG4C,KAAK,CAACE,GAAG,CAACC,IAAI,IAAI;QAChC,MAAM;UAAE3C,IAAI;UAAEkC;QAAK,CAAC,GAAGX,aAAa,CAACoB,IAAI,CAAC;QAC1C,MAAM3D,MAAM,GAAGoD,mBAAmB,CAACpC,IAAI,EAAEkC,IAAI,CAAC;QAC9C,OAAO;UAAES,IAAI;UAAE3D,MAAM;UAAE4D,KAAK,EAAEV,IAAI,CAACL;QAAO,CAAC;MAC7C,CAAC,CAAC;;MAEF;MACA,MAAMgB,WAAW,GAAGjD,OAAO,CAACkD,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAAChE,MAAM,EAAE,CAAC,CAAC;MAEvEF,QAAQ,CAACO,IAAI,KAAK;QAChB,GAAGA,IAAI;QACPL,MAAM,EAAE,YAAY6D,WAAW,CAACI,OAAO,CAAC,CAAC,CAAC,iBAAiBrD,OAAO,CAAC8C,GAAG,CAAC,CAAC;UAAEC,IAAI;UAAE3D,MAAM;UAAE4D;QAAM,CAAC,KAC7F,GAAGD,IAAI,KAAKC,KAAK,qBAAqB5D,MAAM,CAACiE,OAAO,CAAC,CAAC,CAAC,EACzD,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE;QACdjE,OAAO,EAAE,CAAC,GAAGI,IAAI,CAACJ,OAAO,EAAE,8BAA8BQ,QAAQ,EAAE;MACrE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACd3B,QAAQ,CAACO,IAAI,KAAK;QAChB,GAAGA,IAAI;QACPL,MAAM,EAAE,UAAUyB,KAAK,YAAYC,KAAK,GAAGD,KAAK,CAACE,OAAO,GAAG,yBAAyB;MACtF,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAMwC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAACtE,KAAK,CAACE,KAAK,CAACmB,IAAI,CAAC,CAAC,EAAE;MACvBpB,QAAQ,CAACO,IAAI,KAAK;QAChB,GAAGA,IAAI;QACPL,MAAM,EAAE;MACV,CAAC,CAAC,CAAC;MACH;IACF;IAEA,IAAI;MACF,IAAIH,KAAK,CAACE,KAAK,CAACqE,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC7Bb,aAAa,CAAC1D,KAAK,CAACE,KAAK,CAAC;MAC5B,CAAC,MAAM,IAAIF,KAAK,CAACE,KAAK,CAACgD,WAAW,CAAC,CAAC,CAACqB,QAAQ,CAAC,OAAO,CAAC,EAAE;QACtD5D,yBAAyB,CAACX,KAAK,CAACE,KAAK,CAAC;MACxC,CAAC,MAAM;QACL,MAAMC,MAAM,GAAGT,IAAI,CAAC4B,QAAQ,CAACtB,KAAK,CAACE,KAAK,CAAC;QACzC;QACA,MAAMsE,eAAe,GAAGC,IAAI,CAACC,GAAG,CAACvE,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,GAAGA,MAAM;QAC7DF,QAAQ,CAACO,IAAI,KAAK;UAChB,GAAGA,IAAI;UACPL,MAAM,EAAEqE,eAAe,CAACG,QAAQ,CAAC,CAAC;UAClCvE,OAAO,EAAE,CAAC,GAAGI,IAAI,CAACJ,OAAO,EAAE,GAAGJ,KAAK,CAACE,KAAK,MAAMsE,eAAe,EAAE;QAClE,CAAC,CAAC,CAAC;MACL;IACF,CAAC,CAAC,OAAO5C,KAAK,EAAE;MACd3B,QAAQ,CAACO,IAAI,KAAK;QAChB,GAAGA,IAAI;QACPL,MAAM,EAAE,UAAUyB,KAAK,YAAYC,KAAK,GAAGD,KAAK,CAACE,OAAO,GAAG,oBAAoB;MACjF,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAM8C,iBAAiB,GAAIC,MAAc,IAAK;IAC5C,MAAM3E,KAAK,GAAGG,QAAQ,CAACyE,OAAO;IAC9B,IAAI5E,KAAK,EAAE;MACT,MAAM6E,KAAK,GAAG7E,KAAK,CAAC8E,cAAc,IAAI,CAAC;MACvC,MAAMC,GAAG,GAAG/E,KAAK,CAACgF,YAAY,IAAI,CAAC;MACnC,MAAMC,QAAQ,GAAGnF,KAAK,CAACE,KAAK,CAACkF,SAAS,CAAC,CAAC,EAAEL,KAAK,CAAC,GAAGF,MAAM,GAAG7E,KAAK,CAACE,KAAK,CAACkF,SAAS,CAACH,GAAG,CAAC;MACtFhF,QAAQ,CAACO,IAAI,KAAK;QAChB,GAAGA,IAAI;QACPN,KAAK,EAAEiF;MACT,CAAC,CAAC,CAAC;MACH;MACAE,UAAU,CAAC,MAAM;QACf,MAAMC,WAAW,GAAGP,KAAK,GAAGF,MAAM,CAAC7B,MAAM;QACzC9C,KAAK,CAACqF,iBAAiB,CAACD,WAAW,EAAEA,WAAW,CAAC;QACjDpF,KAAK,CAACsF,KAAK,CAAC,CAAC;MACf,CAAC,EAAE,CAAC,CAAC;IACP;EACF,CAAC;EAED,oBACE3F,OAAA,CAACP,SAAS;IAACmG,SAAS,EAAC,MAAM;IAAAC,QAAA,eACzB7F,OAAA,CAACJ,IAAI;MAACgG,SAAS,EAAC,WAAW;MAAAC,QAAA,eACzB7F,OAAA,CAACJ,IAAI,CAACkG,IAAI;QAAAD,QAAA,eACR7F,OAAA,CAACN,IAAI;UAAAmG,QAAA,gBACH7F,OAAA,CAACN,IAAI,CAACqG,KAAK;YAACH,SAAS,EAAC,MAAM;YAAAC,QAAA,eAC1B7F,OAAA,CAACN,IAAI,CAACsG,OAAO;cACXC,IAAI,EAAC,MAAM;cACXC,WAAW,EAAC,wDAAwD;cACpErF,KAAK,EAAEV,KAAK,CAACE,KAAM;cACnB8F,QAAQ,EAAE1F,iBAAkB;cAC5B2F,UAAU,EAAGhE,CAAC,IAAK;gBACjB,IAAIA,CAAC,CAACiE,GAAG,KAAK,OAAO,EAAE;kBACrB5B,WAAW,CAAC,CAAC;gBACf;cACF,CAAE;cACF6B,GAAG,EAAE9F;YAAS;cAAA+F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACf;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACQ,CAAC,eAEb1G,OAAA;YAAK4F,SAAS,EAAC,MAAM;YAAAC,QAAA,eACnB7F,OAAA,CAACF,cAAc;cAAC6G,aAAa,EAAE5B;YAAkB;cAAAwB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjD,CAAC,eAEN1G,OAAA;YAAK4F,SAAS,EAAC,mBAAmB;YAAAC,QAAA,eAChC7F,OAAA,CAACL,MAAM;cACLiH,OAAO,EAAC,SAAS;cACjBC,IAAI,EAAC,IAAI;cACTC,OAAO,EAAErC,WAAY;cAAAoB,QAAA,EACtB;YAED;cAAAU,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eAEN1G,OAAA,CAACN,IAAI,CAACqG,KAAK;YAAAF,QAAA,eACT7F,OAAA,CAACN,IAAI,CAACsG,OAAO;cACXe,EAAE,EAAC,UAAU;cACbC,IAAI,EAAE,CAAE;cACRnG,KAAK,EAAEV,KAAK,CAACG,MAAO;cACpB2G,QAAQ;cACRrB,SAAS,EAAC;YAAU;cAAAW,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEhB,CAAC;AAACxG,EAAA,CArPWD,UAAoB;AAAAiH,EAAA,GAApBjH,UAAoB;AAAA,IAAAiH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}