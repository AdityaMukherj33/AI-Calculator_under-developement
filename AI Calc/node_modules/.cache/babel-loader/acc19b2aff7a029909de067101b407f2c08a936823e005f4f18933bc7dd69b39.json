{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ddas0\\\\OneDrive\\\\Desktop\\\\AI Calc\\\\src\\\\components\\\\Calculator.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { Box, TextField, Button, Grid, Paper } from '@mui/material';\nimport * as math from 'mathjs';\nimport { SymbolKeyboard } from './SymbolKeyboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Calculator = () => {\n  _s();\n  const [state, setState] = useState({\n    input: '',\n    result: '',\n    history: []\n  });\n  const inputRef = useRef();\n  const handleInputChange = event => {\n    setState(prev => ({\n      ...prev,\n      input: event.target.value\n    }));\n  };\n  const solveDifferentialEquation = equation => {\n    try {\n      // Simple numerical solution using Euler's method\n      const h = 0.1; // step size\n      const steps = 100;\n      const results = [];\n      let x = 0;\n      let y = 1; // initial condition y(0) = 1\n\n      // Convert equation from dy/dx format to a function\n      const equationFunc = (x, y) => {\n        const expr = equation.replace('dy/dx', '').replace('=', '').trim();\n        const result = math.evaluate(expr, {\n          x,\n          y\n        });\n        return typeof result === 'number' ? result : 0;\n      };\n      for (let i = 0; i <= steps; i++) {\n        results.push({\n          x,\n          y\n        });\n        const dy = equationFunc(x, y);\n        y += h * dy;\n        x += h;\n      }\n      setState(prev => ({\n        ...prev,\n        result: JSON.stringify(results, null, 2),\n        history: [...prev.history, `${equation} solved numerically`]\n      }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        result: `Error: ${error instanceof Error ? error.message : 'Invalid equation format'}`\n      }));\n    }\n  };\n  const solveIntegral = equation => {\n    try {\n      // Split multiple integrals if they exist\n      const parts = equation.split('*').map(part => part.trim());\n      const results = parts.map(part => {\n        // Parse integral expression: ∫f(x)dx\n        const expr = part.replace('∫', '').replace('dx', '').trim().replace(/\\^\\((.*?)\\)/, '^($1)') // Handle expressions like e^(x)\n        .replace(/\\^(\\w)/, '^($1)'); // Handle simple exponents like x^2\n\n        // Create a function to integrate\n        const f = x => {\n          try {\n            return math.evaluate(expr, {\n              x,\n              e: math.e\n            });\n          } catch (err) {\n            throw new Error(`Invalid expression: ${expr}`);\n          }\n        };\n\n        // Numerical integration using Simpson's rule\n        const a = 0; // lower bound\n        const b = 1; // upper bound\n        const n = 1000; // number of intervals\n        const h = (b - a) / n;\n        let sum = f(a) + f(b);\n        for (let i = 1; i < n; i++) {\n          const x = a + i * h;\n          sum += 2 * f(x);\n        }\n        for (let i = 1; i < n; i++) {\n          const x = a + (i - 0.5) * h;\n          sum += 4 * f(x);\n        }\n        return h / 6 * sum;\n      });\n\n      // Multiply results if there are multiple integrals\n      const finalResult = results.reduce((acc, curr) => acc * curr, 1);\n      setState(prev => ({\n        ...prev,\n        result: `Result = ${finalResult.toFixed(6)}\\n\\nDetails:\\n${parts.map((part, i) => `∫${part.replace('∫', '').trim()} from 0 to 1 = ${results[i].toFixed(6)}`).join('\\n')}`,\n        history: [...prev.history, `Solved multiple integrals: ${equation}`]\n      }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        result: `Error: ${error instanceof Error ? error.message : 'Invalid integral format'}`\n      }));\n    }\n  };\n  const handleSolve = () => {\n    if (!state.input.trim()) {\n      setState(prev => ({\n        ...prev,\n        result: 'Error: Please enter an equation'\n      }));\n      return;\n    }\n    try {\n      if (state.input.includes('∫')) {\n        solveIntegral(state.input);\n      } else if (state.input.toLowerCase().includes('dy/dx')) {\n        solveDifferentialEquation(state.input);\n      } else {\n        const result = math.evaluate(state.input);\n        setState(prev => ({\n          ...prev,\n          result: result.toString(),\n          history: [...prev.history, `${state.input} = ${result}`]\n        }));\n      }\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        result: `Error: ${error instanceof Error ? error.message : 'Invalid expression'}`\n      }));\n    }\n  };\n  const handleSymbolClick = symbol => {\n    const input = inputRef.current;\n    if (input) {\n      const start = input.selectionStart || 0;\n      const end = input.selectionEnd || 0;\n      const newValue = state.input.substring(0, start) + symbol + state.input.substring(end);\n      setState(prev => ({\n        ...prev,\n        input: newValue\n      }));\n      // Set cursor position after inserted symbol\n      setTimeout(() => {\n        const newPosition = start + symbol.length;\n        input.setSelectionRange(newPosition, newPosition);\n        input.focus();\n      }, 0);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Enter equation\",\n            variant: \"outlined\",\n            value: state.input,\n            onChange: handleInputChange,\n            placeholder: \"Enter mathematical expression or differential equation (e.g., 'dy/dx = x^2' or '2+2')\",\n            onKeyPress: e => {\n              if (e.key === 'Enter') {\n                handleSolve();\n              }\n            },\n            inputRef: inputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(SymbolKeyboard, {\n            onSymbolClick: handleSymbolClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handleSolve,\n            children: \"Solve\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            multiline: true,\n            rows: 4,\n            variant: \"outlined\",\n            label: \"Result\",\n            value: state.result,\n            InputProps: {\n              readOnly: true\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(Calculator, \"R20Vvb3rx4ui6wjqCSnIvn88evA=\");\n_c = Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["React","useState","useRef","Box","TextField","Button","Grid","Paper","math","SymbolKeyboard","jsxDEV","_jsxDEV","Calculator","_s","state","setState","input","result","history","inputRef","handleInputChange","event","prev","target","value","solveDifferentialEquation","equation","h","steps","results","x","y","equationFunc","expr","replace","trim","evaluate","i","push","dy","JSON","stringify","error","Error","message","solveIntegral","parts","split","map","part","f","e","err","a","b","n","sum","finalResult","reduce","acc","curr","toFixed","join","handleSolve","includes","toLowerCase","toString","handleSymbolClick","symbol","current","start","selectionStart","end","selectionEnd","newValue","substring","setTimeout","newPosition","length","setSelectionRange","focus","sx","p","children","elevation","container","spacing","item","xs","fullWidth","label","variant","onChange","placeholder","onKeyPress","key","fileName","_jsxFileName","lineNumber","columnNumber","onSymbolClick","color","onClick","multiline","rows","InputProps","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/ddas0/OneDrive/Desktop/AI Calc/src/components/Calculator.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { Box, TextField, Button, Grid, Paper } from '@mui/material';\r\nimport * as math from 'mathjs';\r\nimport { SymbolKeyboard } from './SymbolKeyboard';\r\n\r\ninterface CalculatorState {\r\n  input: string;\r\n  result: string;\r\n  history: string[];\r\n}\r\n\r\ninterface DifferentialEquationPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport const Calculator: React.FC = () => {\r\n  const [state, setState] = useState<CalculatorState>({\r\n    input: '',\r\n    result: '',\r\n    history: []\r\n  });\r\n  const inputRef = useRef<HTMLInputElement>();\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      input: event.target.value\r\n    }));\r\n  };\r\n\r\n  const solveDifferentialEquation = (equation: string) => {\r\n    try {\r\n      // Simple numerical solution using Euler's method\r\n      const h = 0.1; // step size\r\n      const steps = 100;\r\n      const results: DifferentialEquationPoint[] = [];\r\n      let x = 0;\r\n      let y = 1; // initial condition y(0) = 1\r\n\r\n      // Convert equation from dy/dx format to a function\r\n      const equationFunc = (x: number, y: number): number => {\r\n        const expr = equation\r\n          .replace('dy/dx', '')\r\n          .replace('=', '')\r\n          .trim();\r\n        const result = math.evaluate(expr, { x, y });\r\n        return typeof result === 'number' ? result : 0;\r\n      };\r\n\r\n      for (let i = 0; i <= steps; i++) {\r\n        results.push({ x, y });\r\n        const dy = equationFunc(x, y);\r\n        y += h * dy;\r\n        x += h;\r\n      }\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        result: JSON.stringify(results, null, 2),\r\n        history: [...prev.history, `${equation} solved numerically`]\r\n      }));\r\n    } catch (error) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        result: `Error: ${error instanceof Error ? error.message : 'Invalid equation format'}`\r\n      }));\r\n    }\r\n  };\r\n\r\n  const solveIntegral = (equation: string) => {\r\n    try {\r\n      // Split multiple integrals if they exist\r\n      const parts = equation.split('*').map(part => part.trim());\r\n      const results = parts.map(part => {\r\n        // Parse integral expression: ∫f(x)dx\r\n        const expr = part\r\n          .replace('∫', '')\r\n          .replace('dx', '')\r\n          .trim()\r\n          .replace(/\\^\\((.*?)\\)/, '^($1)') // Handle expressions like e^(x)\r\n          .replace(/\\^(\\w)/, '^($1)'); // Handle simple exponents like x^2\r\n\r\n        // Create a function to integrate\r\n        const f = (x: number) => {\r\n          try {\r\n            return math.evaluate(expr, { x, e: math.e });\r\n          } catch (err) {\r\n            throw new Error(`Invalid expression: ${expr}`);\r\n          }\r\n        };\r\n\r\n        // Numerical integration using Simpson's rule\r\n        const a = 0; // lower bound\r\n        const b = 1; // upper bound\r\n        const n = 1000; // number of intervals\r\n        const h = (b - a) / n;\r\n        \r\n        let sum = f(a) + f(b);\r\n        for (let i = 1; i < n; i++) {\r\n          const x = a + i * h;\r\n          sum += 2 * f(x);\r\n        }\r\n        for (let i = 1; i < n; i++) {\r\n          const x = a + (i - 0.5) * h;\r\n          sum += 4 * f(x);\r\n        }\r\n        return (h / 6) * sum;\r\n      });\r\n\r\n      // Multiply results if there are multiple integrals\r\n      const finalResult = results.reduce((acc, curr) => acc * curr, 1);\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        result: `Result = ${finalResult.toFixed(6)}\\n\\nDetails:\\n${parts.map((part, i) => \r\n          `∫${part.replace('∫', '').trim()} from 0 to 1 = ${results[i].toFixed(6)}`\r\n        ).join('\\n')}`,\r\n        history: [...prev.history, `Solved multiple integrals: ${equation}`]\r\n      }));\r\n    } catch (error) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        result: `Error: ${error instanceof Error ? error.message : 'Invalid integral format'}`\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSolve = () => {\r\n    if (!state.input.trim()) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        result: 'Error: Please enter an equation'\r\n      }));\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (state.input.includes('∫')) {\r\n        solveIntegral(state.input);\r\n      } else if (state.input.toLowerCase().includes('dy/dx')) {\r\n        solveDifferentialEquation(state.input);\r\n      } else {\r\n        const result = math.evaluate(state.input);\r\n        setState(prev => ({\r\n          ...prev,\r\n          result: result.toString(),\r\n          history: [...prev.history, `${state.input} = ${result}`]\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        result: `Error: ${error instanceof Error ? error.message : 'Invalid expression'}`\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSymbolClick = (symbol: string) => {\r\n    const input = inputRef.current;\r\n    if (input) {\r\n      const start = input.selectionStart || 0;\r\n      const end = input.selectionEnd || 0;\r\n      const newValue = state.input.substring(0, start) + symbol + state.input.substring(end);\r\n      setState(prev => ({\r\n        ...prev,\r\n        input: newValue\r\n      }));\r\n      // Set cursor position after inserted symbol\r\n      setTimeout(() => {\r\n        const newPosition = start + symbol.length;\r\n        input.setSelectionRange(newPosition, newPosition);\r\n        input.focus();\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Paper elevation={3} sx={{ p: 2 }}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Enter equation\"\r\n              variant=\"outlined\"\r\n              value={state.input}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Enter mathematical expression or differential equation (e.g., 'dy/dx = x^2' or '2+2')\"\r\n              onKeyPress={(e) => {\r\n                if (e.key === 'Enter') {\r\n                  handleSolve();\r\n                }\r\n              }}\r\n              inputRef={inputRef}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <SymbolKeyboard onSymbolClick={handleSymbolClick} />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleSolve}\r\n            >\r\n              Solve\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              multiline\r\n              rows={4}\r\n              variant=\"outlined\"\r\n              label=\"Result\"\r\n              value={state.result}\r\n              InputProps={{ readOnly: true }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}